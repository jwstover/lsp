//
// Created by Jake Stover on 4/24/18.
//

#include "anim.h"
#include "util.h"


void setup_anim(CLI::App &app) {
  auto opt = std::make_shared<AnimOptions>();
  auto sub = app.add_subcommand("anim", "Create animations from projection .nrrd files generated by skim.");

  sub->add_option("-n, --name", opt->name, "Basename to be used for final animations.")->required();
  sub->add_option("-t, --tmax", opt->tmax, "Number of projection files.")->required();
  sub->add_option("-d, --dsample", opt->dwn_sample, "Amount by which to down-sample the data.")->required();
  sub->add_option("-x, --scalex", opt->scale_x, "Scaling on the x axis.")->required();
  sub->add_option("-z, --scalez", opt->scale_z, "Scaling on the z axis.")->required();

  sub->set_callback([opt]() { anim_main(*opt); });
}

int anim_main(AnimOptions const &opt) {
  std::string name = opt.name;
  uint tmax = opt.tmax;
  uint down_sample = opt.dwn_sample;
  float scale_x = opt.scale_x;
  float scale_z = opt.scale_z;

  float resample_xy = scale_x / scale_z;
  float resample_z = 1.0 / down_sample;

  std::cout << "Resampling Factors: resample_xy = " << resample_xy << ", resample_z = " << resample_z << std::endl;

  for(int i = 0; i <= tmax; i++) {
    std::string iii = zero_pad(i, 3);

    std::cout << std::endl << "===== " << iii << "/" << tmax << "=====================" << std::endl;

    std::string xy_proj_file = std::string("proj/-projXY.nrrd").insert(5, iii);
    std::string yz_proj_file = std::string("proj/-projYZ.nrrd").insert(5, iii);
    std::string max_z_file = std::string("anim/-max-z.nrrd").insert(5, iii);
    std::string max_x_file = std::string("anim/-max-x.nrrd").insert(5, iii);
    std::string avg_z_file = std::string("anim/-avg-z.nrrd").insert(5, iii);
    std::string avg_x_file = std::string("anim/-avg-x.nrrd").insert(5, iii);


    Nrrd* xy_proj = safe_load_nrrd(xy_proj_file);

    NrrdResampleInfo* nri =  nrrdResampleInfoNew();
  }
}